<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.predev.gymcrm.repository.ReviewMapper">

    <resultMap id="UserResultMap" type="com.predev.gymcrm.entity.Account">
        <id property="userId" column="user_id" />
        <result property="userUsername" column="user_username" />
        <result property="userName" column="user_name" />
        <result property="userPhone" column="user_phone" />
        <result property="userEmail" column="user_email" />
    </resultMap>

    <resultMap id="AccountResultMap" type="com.predev.gymcrm.entity.Account">
        <id property="accountId" column="account_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
    </resultMap>

    <resultMap id="TrainerResultMap" type="com.predev.gymcrm.entity.Trainer">
        <id property="trainerId" column="trainer_id" />
        <result property="accountId" column="account_id" />
        <result property="trainerProfileImgUrl" column="trainer_profile_img_url" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <association property="account" resultMap="AccountResultMap"/>
    </resultMap>

    <resultMap id="ReviewResultMap" type="com.predev.gymcrm.entity.TrainerReview">
        <id property="trainerReviewId" column="trainer_review_id"/>
        <result property="trainerId" column="trainer_id"/>
        <result property="userId" column="user_id"/>
        <result property="trainerReviewText" column="trainer_review_text"/>
        <result property="trainerReviewScore" column="trainer_review_score"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>

    </resultMap>

    <!-- 트레이너 리뷰 삽입 쿼리 -->
    <insert id="insertTrainerReview" parameterType="com.predev.gymcrm.entity.TrainerReview">
        INSERT INTO
            trainer_review_tb
        VALUES
            (0, #{trainerId}, #{userId}, #{trainerReviewText}, #{trainerReviewScore}, now(), now())
    </insert>

    <!-- 모든 트레이너 리뷰 조회 쿼리 -->
    <select
            id="findAllTrainerReviews"
            resultType="com.predev.gymcrm.entity.TrainerReview"
            resultMap="ReviewResultMap"
    >
        SELECT
            *
        FROM
            trainer_review_tb
    </select>

    <!-- 특정 트레이너의 리뷰를 조회하는 쿼리 -->
    <select
            id="findReviewsByTrainerId"
            parameterType="int"
            resultMap="ReviewResultMap">
        SELECT
            trt.trainer_review_id,
            trt.trainer_id,
            trt.user_id,
            trt.trainer_review_text,
            trt.trainer_review_score,
            at.username,
            trt.create_date,
            trt.update_date
        FROM
            trainer_review_tb trt
            left outer join user_tb ut on(ut.user_id = trt.user_id)
            left outer join account_tb at on(at.account_id = ut.account_id)
        WHERE
            trainer_id = #{trainerId}
    </select>
    <select id="findReviewsByUserId"
            resultType="com.predev.gymcrm.entity.TrainerReview"
            resultMap="ReviewResultMap">
        select
            trainer_review_id,
            trainer_id,
            user_id,
            trainer_review_text,
            trainer_review_score
        from
            trainer_review_tb
        where
            user_id = #{userId}
    </select>

    <select
            id="findAllTrainers"
            resultType="com.predev.gymcrm.entity.Trainer"
            resultMap="TrainerResultMap">
        SELECT
            *
        FROM
            trainer_tb
    </select>

    <select id="findTopRatedTrainers" resultType="int">
        SELECT
            trainer_id
        FROM (
            SELECT
                trainer_id,
                COUNT(*) AS review_count
            FROM
                trainer_review_tb
            GROUP BY
                trainer_id
            ORDER BY
                review_count DESC
            LIMIT 3
        ) AS top_rated_trainers
    </select>

    <!-- 각 트레이너들의 평균 점수를 계산하는 쿼리 -->
    <select id="findAverageRatingByTrainer" resultType="Double">
        SELECT
            trainer_id,
            AVG(trainer_review_score) AS average_rating
        FROM
            trainer_review_tb
        GROUP BY
            trainer_id
    </select>

    <!-- 리뷰 갯수가 많은 3명의 트레이너들 중에서 각 트레이너마다 평점이 높은 리뷰 하나를 선정하는 쿼리 -->
    <select id="findTopReviewAmongTopTrainers" resultMap="ReviewResultMap">
        SELECT
        trt.*
        FROM
        trainer_review_tb trt
        INNER JOIN (
        SELECT
        trainer_id,
        MAX(trainer_review_score) AS max_score
        FROM
        trainer_review_tb
        WHERE
        trainer_id IN (
        SELECT
        trainer_id
        FROM (
        SELECT
        trainer_id,
        COUNT(*) AS review_count
        FROM
        trainer_review_tb
        GROUP BY
        trainer_id
        ORDER BY
        review_count DESC
        LIMIT 3
        ) AS top_rated_trainers
        )
        GROUP BY
        trainer_id
        ) AS max_scores ON trt.trainer_id = max_scores.trainer_id AND trt.trainer_review_score = max_scores.max_score
    </select>

    <select id="findTopReviewByTrainerId" resultMap="ReviewResultMap">
        SELECT
        trt.*
        FROM
        trainer_review_tb trt
        INNER JOIN (
        SELECT
        trainer_id,
        MAX(trainer_review_score) AS max_score,
        MAX(create_date) AS max_create_date
        FROM
        trainer_review_tb
        WHERE
        trainer_id = #{trainerId}
        GROUP BY
        trainer_id
        ) AS max_scores ON trt.trainer_id = max_scores.trainer_id
        AND trt.trainer_review_score = max_scores.max_score
        AND trt.create_date = max_scores.max_create_date
    </select>




</mapper>